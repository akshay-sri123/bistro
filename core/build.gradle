buildscript {
    repositories {
        flatDir {
            dirs "$rootProject.projectDir"
        }
        mavenLocal()
        mavenCentral()
        jcenter()
	}
    dependencies {
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'

description 'General-purpose data analysis engine radically changing the way batch and stream data is processed'

group = 'org.conceptoriented'
archivesBaseName = 'bistro-core'
version = '0.8.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    testCompile("junit:junit:4.12")
}



test {
    testLogging.showStandardStreams = true // To see print output in unit tests
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

jar {
    baseName = 'bistro-core'
    version =  '0.8.0-SNAPSHOT'
}

// Generate archive with source files
task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allJava
    // from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    // from javadoc
}
javadoc.failOnError = false // Ignore syntactic errors in javadoc html

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

// Uncomment this section to sign archives and pom (gradle.properties will be needed specifying access to the keys)
/*
signing {
    required { !version.endsWith("SNAPSHOT") }
    sign configurations.archives
}
// call signArchives task before publish task
//task preparePublish(dependsOn: signArchives)
*/

// Install into (local) maven repository
publishing {
    publications {

        mavenJava(MavenPublication) {
            from components.java

            // Set the base name of the artifacts
            //groupId 'org.conceptoriented'
            artifactId 'bistro-core'
            //version '0.8.0-SNAPSHOT'

            //artifact jar
            artifact sourceJar
            artifact javadocJar

            // Add fields to POM which are required by Sonatype OSS
            customizePom(pom, rootProject)

            // Uncomment this section to sign archives and pom (gradle.properties will be needed specifying access to the keys)
/*
            // create and sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
*/

        }

    }
    repositories {
        mavenLocal()
/*
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
*/
    }
}

def customizePom(pom, gradleProject) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'Bistro Engine'
            description gradleProject.description
            url 'http://conceptoriented.org'
            organization {
                name 'Concept-Oriented'
                url 'http://conceptoriented.org'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/asavinov/bistro/issues'
            }
            scm {
                url 'https://github.com/asavinov/bistro'
                connection 'scm:git:git://github.com/asavinov/bistro.git'
                developerConnection 'scm:git:ssh:git@github.com/asavinov/bistro.git'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'https://opensource.org/licenses/MIT'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'asavinov'
                    name 'Alexandr Savinov'
                    email 'savinov@conceptoriented.org'
                }
            }
        }
    }
}
